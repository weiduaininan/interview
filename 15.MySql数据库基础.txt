MySQL数据库基础考察点

一、总结

一句话总结：

注意：只写精品

 

1、mysql定义int(3)，那么我存1234就错了么？

不是：无影响：只会影响显示字符的个数：可以为整数类型指定宽度，例如：INT（11）、对大多数应用是没有意义的，它不会限制值的合法范围，只会影响显示字符的个数

int(3)的意义：如果我们是12，又设置了zerofill，那么mysql自动为我们填充为012

 

2、mysql中FLOAT、DOUBLE、DECIMAL注意 ？

1、DECIMAL可存储比BIGINT还大的整数；可以用于存储精确的小数

2、FLOAT和DOUBLE类型支持使用标准的浮点进行近似计算：比DECIMAL效率高

 

3、varchar存储实质？

额外字节记录长度：VARCHAR使用1或2个额外字节记录字符串的长度，列长度小于255字节，使用1个字节表示，否则用2个

截断：VARCHAR长度，如果存储内容超出指定长度，会被截断

 

4、char使用注意？

空格填充比较：CHAR会根据需要采用空格进行填充以方便比较

截断：CHAR长度，超出设定的长度，会被截断

 

CHAR是定长的，根据定义的字符串长度分配足够的空间
空格填充比较：CHAR会根据需要采用空格进行填充以方便比较
CHAR适合存储很短的字符串，或者所有值都接近同一个长度
截断：CHAR长度，超出设定的长度，会被截断

 

5、char比varchar好的地方？

碎片：对于经常变更的数据，CHAR比VARCHAR更好，CHAR不容易产生碎片

短串效率：对于非常短的列，CHAR比VARCHAR在存储空间上更有效率

 

6、BLOB/TEXT类型注意？

尽量避免使用：BLOB/TEXT类型，查询会使用临时表，导致严重的性能开销。

 

7、InnoDB表引擎 和 MyISAM表引擎 比较 及注意？

1、用InnoDB就对了

2、InnoDB：事务、优化、性能好、行锁

3、配置分开共享表空间：InnoDB数据存储在共享表空间，可以通过配置分开

 

InnoDB表引擎
默认事务型引擎，最重要最广泛的存储引擎，性能非常优秀
数据存储在共享表空间，可以通过配置分开
对主键查询的性能高于其他类型的存储引擎
内部做了很多优化，从磁盘读取数据时自动在内存构建hash索引，插入数据时自动构建插入缓冲区

通过一些机制和工具支持真正的热备份
支持崩溃后的安全恢复
支持行级锁
支持外键


MyISAM表引擎
5.1版本前，MyISAM是默认的存储引擎
拥有全文索引、压缩、空间函数
不支持事务和行级锁，不支持崩溃后的安全恢复
表存储在两个文件，MYD和MYI
设计简单，某些场景下性能很好

 

8、MySQL锁机制？

读锁：共享的，不堵塞，多个用户可以同时读一个资源，互不干扰

写锁：排他的，一个写锁会阻塞其他的写锁和读锁，这样可以只允许一个人进行写入，防止其他用户读取正在写入的资源。

表锁是日常开发当中常见的问题，因此也是面试当中最常见的考察点，当多个查询同一时刻进行数据修改时，就会产生并发控制的问题。


共享锁和排他锁，其实就是读锁和写锁

读锁
共享的，不堵塞，多个用户可以同时读一个资源，互不干扰


写锁
排他的，一个写锁会阻塞其他的写锁和读锁，这样可以只允许一个人进行写入，防止其他用户读取正在写入的资源。

 

9、行锁 和 表锁 对比？

开销小：表锁，系统性能开销最小，会锁定整张表，MyISAM使用表锁

性能好，开销大：行锁，最大程度地支持并发处理，但是也带来了最大的锁开销，InnoDB实现行级锁

 

锁粒度
表锁，系统性能开销最小，会锁定整张表，MyISAM使用表锁
行锁，最大程度地支持并发处理，但是也带来了最大的锁开销，InnoDB实现行级锁

 

10、事务处理？

同存储引擎：服务器层不管理事务，由下层的引擎实现，所以同一个事务中，使用多种存储引擎不靠谱

不提醒，不报错：在非事务的表上执行事务操作MySQL不会发出提醒，也不会报错

 

MySQL提供事务处理的表引擎，InnoDB

 

11、存储过程 实质？

一条或多条MySQL语句的集合


为以后的使用而保存的一条或多条MySQL语句的集合
存储过程就是有业务逻辑和流程的集合
可以在存储过程中创建表，更新数据，删除等等

 

12、存储过程 使用场景？

类似函数：通过把处理封装在容易使用的单元中，简化复杂的操作


通过把处理封装在容易使用的单元中，简化复杂的操作
保证数据的一致性
简化对变动的管理

 

13、触发器实质？

与表事件相关的特殊的存储过程


提供给程序员和数据分析员来保证数据完整性的一种方法，它是与表事件相关的特殊的存储过程

 

14、触发器 使用场景 及注意？

级联更改：可通过数据库中的相关表实现级联更改

实时监控：实时监控某张表中的某个字段的更改而需要做出相应的处理

滥用维护困难：滥用会造成数据库及应用程序的维护困难


可通过数据库中的相关表实现级联更改
实时监控某张表中的某个字段的更改而需要做出相应的处理
某些业务编号的生成等
滥用会造成数据库及应用程序的维护困难