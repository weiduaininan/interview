MySQL创建高性能索引考点

一、总结

一句话总结：

注意：只写精品

 

1、索引的基础？

类似书籍的目录：索引类似于书籍的目录，要想找到一本书的某个特定主题，需要先查找书的目录，定位对应的页码

索引->行号->数据：存储引擎使用类似的方式进行数据查询，先去索引当中找到对应的值，然后根据匹配的索引找到对应的数据行

 

2、索引对性能的影响？

1、大大减少服务器需要扫描的数据量,大大提高查询速度，降低写的速度、占用磁盘

2、帮助服务器避免排序和临时表

3、将随机I/O变顺序I/O

 

3、非常小的表，比如50条数据，索引快还是全表扫描快？

全表扫描快：因为多了查询索引的步骤，多了一步所以慢

 

4、索引的使用场景？

小表全表扫描效率高：对于非常小的表，大部分情况下全表扫描效率更高

中到大型表非常有效：索引非常有效

特大型的表用分区+索引：建立和使用索引的代价将随之增长，可以使用分区技术来解决

 

5、索引的类型（基础）？

普通索引：很普通的索引：最基本的索引，没有任何约束限制

唯一索引：唯一性约束：与普通索引类似，但是具有唯一性约束

主键索引：唯一性约束+不允许为空：特殊的唯一索引，不允许有空值

 

索引有很多种类型，都是实现在存储引擎层的
普通索引：很普通的索引：最基本的索引，没有任何约束限制
唯一索引：唯一性约束：与普通索引类似，但是具有唯一性约束
主键索引：唯一性约束+不允许为空：特殊的唯一索引，不允许有空值

 

 

6、唯一索引和主键索引的区别（经常考）？

唯一索引可多个：一个表只能有一个主键索引，可以有多个唯一索引

主键索引是特殊的唯一索引：主键索引一定是唯一索引，唯一索引不是主键索引

主键索引有额外功能：主键可以与外键构成参照完整性约束，防止数据不一致

 

7、索引的类型（高级）？

组合索引：将多个列组合在一起创建索引，可以覆盖多个列

外键索引（很少用）：只有InnoDB类型的表才可以使用外键索引，保证数据的一致性、完整性和实现级联操作

全文索引（很少用）：MySQL自带的全文索引只能用于MyISAM，并且只能对英文进行全文检索

 

8、MySQL索引的创建原则？

1.最适合索引的列是出现在WHERE子句中的列，或连接子句中的列而不是出现在SELECT关键字后的列

2.对字符串进行索引，应该制定一个前缀长度，可以节省大量的索引空间

3.避免创建过多索引，索引会额外占用磁盘空间，降低写操作效率

4.主键尽可能选择较短的数据类型，可以有效减少索引的磁盘占用提高查询效率


1.最适合索引的列是出现在WHERE子句中的列，或连接子句中的列而不是出现在SELECT关键字后的列
2.索引列的基数越大，索引的效果越好
3.对字符串进行索引，应该制定一个前缀长度，可以节省大量的索引空间
4.根据情况创建复合索引，复合索引可以提高查询效率
5.避免创建过多索引，索引会额外占用磁盘空间，降低写操作效率
6.主键尽可能选择较短的数据类型，可以有效减少索引的磁盘占用提高查询效率

 

9、MySQL索引的注意事项？

1.like查询，%不能在前，可以使用全文索引：where name like "% wang%" 索引会失效

2.如果or前的条件中的列有索引，后面的没有，索引都不会被用到

3.列类型是字符串，查询时一定要给值加引号，否则索引失效：where name=100;name是字符串，所以100要加引号


1.复合索引遵循前缀原则
2.like查询，%不能在前，可以使用全文索引：where name like "% wang%" 索引会失效
3.column is null可以使用索引
4.如果MySQL估计使用索引比全表扫描更慢，会放弃使用索引：where id>1 and id <100：因为多了查询索引的步骤
5.如果or前的条件中的列有索引，后面的没有，索引都不会被用到
6.列类型是字符串，查询时一定要给值加引号，否则索引失效：where name=100;name是字符串，所以100要加引号